<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法基础 on 青龙偃月的博客</title>
    <link>http://www.flysnow.org/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 算法基础 on 青龙偃月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 07 May 2018 22:18:31 +0800</lastBuildDate>
    
	<atom:link href="http://www.flysnow.org/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>算法基础———插入排序 </title>
      <link>http://www.flysnow.org/post/2018/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 07 May 2018 22:18:31 +0800</pubDate>
      
      <guid>http://www.flysnow.org/post/2018/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>概念  在归并排序中，我们是用一种被称为分治法的通用模式，在分治法中，我们即将原问题分解为类似原问题的子问题，并递归的求解这些子问题，然后再归并这些子问题的解。  复杂度  时间复杂度 对于所有情况，它仅有一个O(nlgn) 空间复杂度O（n）  原址  非原址  js程序代码 bash function insertionSort(array) { console.time(&#39;插入排序耗时：&#39;); for (var i = 1; i &amp;lt; array.length; i++) { var key = array[i]; var j = i - 1; while ( array[j] &amp;gt; key) { array[j + 1] = array[j]; j--; } array[j + 1] = key; } console.timeEnd(&#39;插入排序耗时：&#39;); return array; } var arr=[3,44,38,5,47,15,36,26,27,2,46,4,19,50,48]; console.log(insertionSort(arr));  &amp;ndash;&amp;gt;</description>
    </item>
    
    <item>
      <title>算法基础———选择排序 </title>
      <link>http://www.flysnow.org/post/2018/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 05 May 2018 23:08:58 +0800</pubDate>
      
      <guid>http://www.flysnow.org/post/2018/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;日积跬步，以期千里。
《算法基础·打开算法之门》小札&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;首先声明&lt;code&gt;array[i]&lt;/code&gt;是目前所看到的子数组中最小的元素，然后扫描数组的剩余部分，每当发现一个有一个元素小于当前最小的元素时，我们就更新最小元素的索引&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</description>
    </item>
    
    <item>
      <title>算法基础之二分查找 </title>
      <link>http://www.flysnow.org/post/2018/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Fri, 04 May 2018 21:24:14 +0800</pubDate>
      
      <guid>http://www.flysnow.org/post/2018/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近在看《算法基础·打开算法之门》（毕竟程序猿的算法不能太差&amp;hellip;）
人总是健忘的，所以我决定将我收获的东西记录下来
那么，首先，就是你了，最基础的二分查找！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;关于二分查找-可以拥有如下叙述&#34;&gt;关于二分查找，可以拥有如下叙述:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;任意情况下，我们仅仅考虑某个子数组，也就是说，介于某两个索引之间的部分数组，将这两个索引依次记为p和r。初始时，p=1,r=n，因此开始时，子数组为整个完整数组，我们反复地将数组规模减半，直到一下任意一种情况发生：要么找到了要查找的元素，要么当前子数组为空（p&amp;gt;r）。&lt;/li&gt;
&lt;li&gt;反复对子数组执行减半操作需要的时间花费是&lt;code&gt;O(lgn)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</description>
    </item>
    
  </channel>
</rss>